github命令

---创建本地库相关
ssh-keygen -t rsa -C "your_email@youremail.com" :在本地生成ssh码,默认地址/User/lenovo(用户名)/.ssh/id_rsa.pub,(your_email@youremail.com为github上注册的邮箱),然后在github账号里的SSH keys中添加SSH key
ssh -T git@github.com :验证ssh key是否添加成功
git config --global user.name "your name" :设置username,任意填
git config --global user.email "your_email@youremail.com" :设置email，为注册邮箱
git clone <path> :创建一个远程仓库的本地克隆版本,<path>的形式{/path/to/repository||username@host:/path/to/repository||https://github.com/xx/xxx.git}
git remote add origin git@github.com:yourName/yourRepo.git :上传本地仓库,后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库


---分支(branch)相关
git checkout -b <branch> :创建一个叫做branch的分支，并切换过去
git checkout <branch> :切换到<branch>分支
git merge <branch> :把<branch>合并带当前分支
git diff <source_branch> <target_branch> :查看<source_branch> <target_branch>的·差异
git branch -d <branch> :删除<branch>


---工作流相关
--文件储存流程
工作目录==>暂存区==>HEAD(指向最后一次改动)==>远程仓库
git pull :从远程仓库更新当前分支的本地库 
--文件从本地到github远程仓库
git add <filename> :把<filename>从工作目录添加到缓存区
git commit -m "备注" :把所有变动提交从缓存区提交到HEAD中，并加备注
git push origin <branch> :把<branch>分支的变动提交到远程仓库


---log相关
git log :如果你想了解本地仓库的历史记录，最简单的命令就是使用: 
git log --author=<name> :你可以添加一些参数来修改他的输出，从而得到自己想要的结果。只看<name>的提交记录:
git log --pretty=oneline :一个压缩后的每一条提交记录只占一行的输出
git log --graph --oneline --decorate --all :或者你想通过 ASCII 艺术的树形结构来展示所有的分支, 每个分支都标示了他的名字和标签 
git log --name-status :看看哪些文件改变了 
git log --help :获取更多指令
